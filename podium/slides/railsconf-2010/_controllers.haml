.slide.section#Controllers

  %h1 Controllers

.slide

  %h1 Controller of Many Faces

.slide

  %h1 Embrace REST

.slide

  :rubycode
    class UserController < ApplicationController
      def login # doing double duty
        if request.post?
          if session[:user_id] = User.authenticate(params[:user][:login], params[:user][:password])
            flash[:message]  = "Login successful"
            redirect_to root_url
          else
            flash[:warning] = "Login unsuccessful"
          end
        end
      end

      def logout
        session[:user_id] = nil
        flash[:message] = 'Logged out'
        redirect_to :action => 'login'
      end

      # RESTful actions...
    end

.slide 

  :rubycode
    map.resources :users, :collection => { :login => [:get, :post], :logout => :get }

.slide

  %h1 What is a resource?

.slide

  %h1 Resources Are NOT Models

.slide

  :rubycode
    class SessionsController < ApplicationController
      def new
        # Just render the sessions/new.html.erb template
      end
    
      def create
        if session[:user_id] = User.authenticate(params[:user][:login], params[:user][:password])
          flash[:message]  = "Login successful"
          redirect_to root_url
        else
          flash.now[:warning] = "Login unsuccessful"
          render :action => "new"
        end
      end
    
      def destroy
        session[:user_id] = nil
        flash[:message] = 'Logged out'
        redirect_to login_url
      end
    end

.slide

  :rubycode
    map.resource :sessions, :only => [:new, :create, :destroy]
    map.login  "/login",  :controller => :user_sessions, :action => :new
    map.logout "/logout", :controller => :user_sessions, :action => :destroy

.slide

  %h1 Simply OOP
  %h3 Single Responsibility Principle

.slide

  %h1 Workshop
  %h2 Extract to a New Controller

.slide

  %h1 Solution
  %h2 Extract to a New Controller
