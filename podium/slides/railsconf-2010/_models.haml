.slide.section#Models
  .background bigm.jpg

.slide.subsection#Too_Many_Models

  %h1 Too Many Models

.slide

  %h1 "Just One More Model"

.slide

  %h3 Class
  %h3 Migrations
  %h3 Unit Tests
  %h3 Factories/Fixtures for Tests
  %h3 Additional Finders and Validations

.slide

  :rubycode
    class Article < ActiveRecord::Base
      belongs_to :state
      belongs_to :category

      validates_presence_of :state_id, :category_id
    end

.slide

  :rubycode
    class State < ActiveRecord::Base
      has_many :articles
    end

    class Category < ActiveRecord::Base
      has_many :articles
    end

.slide

  %h3 Setting Article State
  :rubycode
    @article.state = State.find_by_name("published")

.slide

  %h3 Setting Article State
  :rubycode
    @article.state = State.published

  %h3 Checking Article State
  :rubycode
    @article.state == State.published

.slide

  :rubycode
    class State < ActiveRecord::Base
      validates_presence_of :name

      class << self
        State.all.each do |state|
          define_method "#{state}" do
            first(:conditions => { :name => state })
          end
        end
      end
    end

.slide

  %h1 No Hardcoded Strings

.slide

  %h1 These are stored in the database, but there is functionality tied to them

.slide

  %h1 They Can't Change

.slide

  %h1 So Why Are They Stored In The Database?

.slide.subsection#Workshop
  .background workshop1.jpg

  %h1 Workshop
  %h2 Denormalize the Data

.slide.subsection#Solution
  .background solution1.jpg

  %h1 Solution
  %h2 Denormalize the Data

.slide

  %h2 Delete the tables
  .small
    :rubycode
      # script/generate migration delete_states_and_categories
      class DeleteStatesAndCategories < ActiveRecord::Migration
        def self.up
          add_column :articles, :state, :string, :null => false
          update "update articles, states set articles.state=states.name 
                  where articles.state_id=states.id"
          drop_table :states

.slide

  %h2 Delete the Category and State models and factories
  :code
    git rm app/models/state.rb
    git rm test/unit/state_test.rb
    git rm db/bootstrap/states.yml
    git rm app/models/category.rb
    git rm test/unit/category_test.rb
    git rm db/bootstrap/categories.yml

.slide

  %h2 Refactor the Article model and tests
  .small
    :rubycode
      class Article < ActiveRecord::Base
        STATES = %w(draft review published) 
        CATEGORIES = %w(Hiking Skiing)
  
        validates_presence_of :state, :category
        validates_inclusion_of :state, :in => STATES
        validates_inclusion_of :category, :in => CATEGORIES
  
        def flag!
          self.update_attributes!(:state => "review")
        end
      end

.slide

  %h2 Refactor the views
  :htmlcode
    <div class="state">
      <b>State:</b>
      <%=h @article.state %>
    </div>

.slide

  %h2 Refactor the views
  :htmlcode
    <p>
      <%= form.label :state %><br />
      <%= form.select :state, 
                      Article::STATES, 
                      :include_blank => true %>
    </p>

.slide

  %h2 Refactor the views
  .small
    :htmlcode
      <div class="main with_sidebar">
        <% form_tag articles_path, { :class => "search", :method => :get } do %>
          <%= label_tag "state" %>
          <%= select_tag "state", 
                         "<option></option>"+
                         options_for_select(Article::STATES) %>

.slide

  %h2 Refactor the Articles controller and tests
  .small
    :rubycode
      def index
        conditions = {}
        conditions[:category] = params[:category] if params[:category].present?
        conditions[:state] = params[:state] if params[:state].present?

.slide

  %h2 Cucumber
  :code
    Given the following articles exist:
      | title              | state     |
      | Draft Article      | draft     |
      | Review Article     | review    |
      | Published Article  | published |
